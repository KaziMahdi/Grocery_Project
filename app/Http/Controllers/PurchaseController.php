<?php
/*
* ProBot Version: 3.0
* Laravel Version: 10x
* Description: This source file "app/Http/_PurchaseController.php" was generated by ProBot AI.
* Date: 5/5/2023 7:46:28 PM
* Contact: towhid1@outlook.com
*/
namespace App\Http\Controllers;
use App\Http\Controllers\Controller;
use App\Models\Product;
use App\Models\Purchase;
use App\Models\PurchaseDetail;
use App\Models\Stock;
use App\Models\Supplier;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\DB;
use Illuminate\Pagination\Paginator;
class PurchaseController extends Controller{
	public function index(){
		$purchases= DB::table("purchases as p")
		->join("suppliers as s","p.supplier_id","=","s.id")
		->select("p.*","s.name as sname")
		->paginate(5);
		return view("pages.erp.purchase.index",["purchases"=>$purchases]);
	}
	public function create(){
		return view("pages.erp.purchase.create",["suppliers"=>Supplier::all(),"products"=>Product::all()]);
	}
	public function store(Request $request){
		//Purchase::create($request->all());
		$purchase = new Purchase;
		$purchase->supplier_id=$request->cmbSuppliar;
		$purchase->purchase_date=date("Y-m-d",strtotime($request->txtPurchaseDate));
		$purchase->delivery_date=date("Y-m-d",strtotime($request->txtDueDate));
		$purchase->shipping_address=$request->txtShipping;
		$purchase->purchase_total=$request->txtPurchaseTotal;
		$purchase->paid_amount=$request->txtpaidAmount;
		
		$purchase->remark=$request->txtremark;
		$purchase->discount=$request->txtDiscount;
		$purchase->vat=$request->txtVat;

date_default_timezone_set("Asia/Dhaka");
		$purchase->created_at=date('Y-m-d H:i:s');
date_default_timezone_set("Asia/Dhaka");
		$purchase->updated_at=date('Y-m-d H:i:s');

		$purchase->save();

		$purchase_detailse=$request->txtProducts;

		foreach($purchase_detailse as $purchase_detail){

			$detail_purchase=new PurchaseDetail;

			$detail_purchase->purchase_id=$purchase->id;
			$detail_purchase->product_id=$purchase_detail["item_id"];
			$detail_purchase->measure=$purchase_detail["measure"];
			$detail_purchase->uom_id=$purchase_detail["uom_id"];
			$detail_purchase->price=$purchase_detail["price"];
			$detail_purchase->vat=0;
			$detail_purchase->discount=$purchase_detail["discount"];
			
			$detail_purchase->save();

		}
		foreach($purchase_detailse as $purchase_detail){
		$stock=new Stock;     
      	$stock->product_id=$purchase_detail["item_id"];
      	$stock->measure=$purchase_detail["measure"];
      	$stock->uom_id=$purchase_detail["uom_id"];
		$stock->transaction_type_id=3;
      	      	
      	$stock->save();
		}
		return back()->with('success', 'Created Successfully.');
	}
	public function show($id){
		$purchase = Purchase::find($id);
		$suppliar=Supplier::find($purchase->supplier_id);

		$purchase_details=DB::table("purchase_details as d")
		->join("products as p","d.product_id","=","p.id")
		->join("uoms as u","d.uom_id","=","u.id")
		->where("d.purchase_id",$id)
		->select("d.*","p.name as pname","u.name as uname")
		->get();
		return view("pages.erp.purchase.show",["purchase"=>$purchase,"suppliar"=>$suppliar,"purchse_details"=>$purchase_details]);
	}
	public function edit(Purchase $purchase){
		return view("pages.erp.purchase.edit",["purchase"=>$purchase,"suppliers"=>Supplier::all()]);
	}
	public function update(Request $request,Purchase $purchase){
		//Purchase::update($request->all());
		$purchase = Purchase::find($purchase->id);
		$purchase->supplier_id=$request->supplier_id;
		$purchase->purchase_date=$request->purchase_date;
		$purchase->delivery_date=$request->delivery_date;
		$purchase->shipping_address=$request->shipping_address;
		$purchase->purchase_total=$request->purchase_total;
		$purchase->paid_amount=$request->paid_amount;
		$purchase->due_amount=$request->due_amount;
		$purchase->remark=$request->remark;
		$purchase->discount=$request->discount;
		$purchase->vat=$request->vat;
date_default_timezone_set("Asia/Dhaka");
		$purchase->created_at=date('Y-m-d H:i:s');
date_default_timezone_set("Asia/Dhaka");
		$purchase->updated_at=date('Y-m-d H:i:s');

		$purchase->save();

		return redirect()->route("purchases.index")->with('success','Updated Successfully.');
	}
	public function destroy(Purchase $purchase){
		$purchase->delete();
		return redirect()->route("purchases.index")->with('success', 'Deleted Successfully.');
	}
}
?>
