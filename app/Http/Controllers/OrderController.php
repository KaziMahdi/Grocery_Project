<?php
/*
* ProBot Version: 3.0
* Laravel Version: 10x
* Description: This source file "app/Http/_OrderController.php" was generated by ProBot AI.
* Date: 5/3/2023 9:40:43 PM
* Contact: towhid1@outlook.com
*/
namespace App\Http\Controllers;
use App\Http\Controllers\Controller;
use App\Models\Order;
use App\Models\Customer;
use App\Models\OrderDetail;
use App\Models\Product;
use App\Models\Status;
use App\Models\Stock;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\DB;
use Illuminate\Pagination\Paginator;

class OrderController extends Controller{
	public function index(){
		$orders = DB::table("orders as o")
		->join("customers as c","o.customer_id","=","c.id")
		->select("o.*","c.name as cname")
		->paginate(5);
		return view("pages.erp.order.index",["orders"=>$orders]);
	}
	public function create(){
		return view("pages.erp.order.create",["customers"=>Customer::all(),"products"=>Product::all()]);
	}
	public function store(Request $request){
		//Order::create($request->all());
		$order = new Order;
		$order->customer_id=$request->cmbCustomer;
		$order->order_date=date("Y-m-d",strtotime($request->txtOrderDate));
		$order->delivery_date=date("Y-m-d",strtotime($request->txtDueDate));
		
		$order->order_total=$request->txtorderTotal;
		$order->paid_amount=$request->txtpaidAmount;
		
		$order->remark=$request->txtremark;
		$order->discount=$request->txtDiscount;
		$order->vat=$request->txtVat;

date_default_timezone_set("Asia/Dhaka");
		$order->created_at=date('Y-m-d H:i:s');
date_default_timezone_set("Asia/Dhaka");
		$order->updated_at=date('Y-m-d H:i:s');

		$order->save();

				//  return $request->txtProducts;

		$products=$request->txtProducts;
		
		foreach($products as $product){
			
			$prorder_Detail=new OrderDetail;

			$prorder_Detail->order_id=$order->id;
			$prorder_Detail->product_id=$product["item_id"];
			$prorder_Detail->measure=$product["measure"];
			$prorder_Detail->uom_id=$product["uom_id"];
			$prorder_Detail->price=$product["price"];
			$prorder_Detail->vat=0;
			$prorder_Detail->discount=$product["discount"];
			
			$prorder_Detail->save();

		
		}

		$stock=new Stock;     
      	$stock->product_id=$product["item_id"];
      	$stock->measure=-$product["measure"];
      	$stock->uom_id=$product["uom_id"];
		$stock->transaction_type_id=1;
      	      	
      	$stock->save();


		return redirect()->route("orders.index")->with('success','Updated Successfully.');
	}
	public function show($id){
		$order = Order::find($id);
		$customer=Customer::find($order->customer_id);

		$order_details=DB::table("order_details as o")
		->join("products as p","o.product_id","=","p.id")
		->join("uoms as u","o.uom_id","=","u.id")
		->where("o.order_id",$id)
		->select("o.*","p.name as pname","u.name as uname")
		->get();
		return view("pages.erp.order.show",["order"=>$order,"customer"=>$customer,"order_details"=>$order_details]);
	}
	public function edit(Order $order){
		return view("pages.erp.order.edit",["order"=>$order,"customers"=>Customer::all()]);
	}
	public function update(Request $request,Order $order){
		//Order::update($request->all());
		$order = Order::find($order->id);
		$order->customer_id=$request->customer_id;
		$order->order_date=$request->order_date;
		$order->delivery_date=$request->delivery_date;
		$order->shipping_address=$request->shipping_address;
		$order->order_total=$request->order_total;
		$order->paid_amount=$request->paid_amount;
		$order->due_amount=$request->due_amount;
		$order->remark=$request->remark;
		
		$order->discount=$request->discount;
		$order->vat=$request->vat;
date_default_timezone_set("Asia/Dhaka");
		$order->created_at=date('Y-m-d H:i:s');
date_default_timezone_set("Asia/Dhaka");
		$order->updated_at=date('Y-m-d H:i:s');

		$order->save();

		return redirect()->route("orders.index")->with('success','Updated Successfully.');
	}

	public function destroy(Order $order){
		$order->delete();
		return redirect()->route("orders.index")->with('success', 'Deleted Successfully.');
	}


	public static function count($criteria)
{
    $count = DB::table('orders')
        ->whereRaw($criteria)
        ->count();

    return view("pages.erp.dashboard.index",["count"=>$count]) ;
}

}

?>
